rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Allow read if the user is authenticated
      allow read: if request.auth != null;
      
      // Allow create if the user is authenticated and the document ID matches their auth UID
      allow create: if request.auth != null 
                    && request.auth.uid == userId
                    && request.resource.data.keys().hasAll(['fullname', 'email', 'phone', 'role', 'createdDate', 'lastActive'])
                    && request.resource.data.role == 'user';
      
      // Allow update if the user is authenticated and either:
      // 1. They are updating their own document
      // 2. They are an admin
      allow update: if request.auth != null
                    && (request.auth.uid == userId || isAdmin())
                    && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullname', 'avatar', 'lastActive']) 
                        || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive']));
      
      // Allow delete if the user is an admin
      allow delete: if request.auth != null && isAdmin();
    }

    match /posts/{postId} {
      // Allow read for all authenticated users
      allow read: if request.auth != null;

      // Allow create if the user is authenticated
      allow create: if request.auth != null
                    && request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'authorName', 'createdAt', 'updatedAt', 'likes', 'likedBy', 'comments', 'tags', 'isAdminPost', 'isApproved', 'isRejected', 'subjectCategory'])
                    && request.resource.data.authorId == request.auth.uid;

      // Allow update if the user is the author, an admin, or updating likes/comments
      allow update: if request.auth != null
                    && (request.auth.uid == resource.data.authorId 
                        || isAdmin()
                        || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy', 'comments', 'isApproved'])));

      // Allow delete if the user is the author or an admin
      allow delete: if request.auth != null
                    && (request.auth.uid == resource.data.authorId || isAdmin());
    }

    match /activities/{activityId} {
      // Allow read for all authenticated users
      allow read: if request.auth != null;

      // Allow create and update if the user is an admin
      allow create, update: if request.auth != null && isAdmin();

      // Allow delete if the user is an admin
      allow delete: if request.auth != null && isAdmin();
    }

    match /users/{userId}/savedPosts/{postId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /avatars/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
